"---------------------------------------------------------------------------
" フォント設定:
"
if has('win32')
  " Windows用
  "set guifont=MyricaM_M:h12:cSHIFTJIS:qDRAFT
  set guifont=PlemolJP:h11:cSHIFTJIS:qDRAFT
  "set guifont=MS_Mincho:h12:cSHIFTJIS
  " 行間隔の設定
  set linespace=1
  " 一部のUCS文字の幅を自動計測して決める
  if has('kaoriya')
    set ambiwidth=auto
  endif
elseif has('mac')
  set guifont=Osaka－等幅:h14
elseif has('xfontset')
  " UNIX用 (xfontsetを使用)
  set guifontset=a14,r14,k14
else
    set guifont=Monospace\ 12
endif

"---------------------------------------------------------------------------
" ウインドウに関する設定:
"
" ウインドウの幅
set columns=160
" ウインドウの高さ
set lines=50
" コマンドラインの高さ(GUI使用時)
set cmdheight=2
" 画面を黒地に白にする (次行の先頭の " を削除すれば有効になる)
"colorscheme evening " (GUI使用時)

"---------------------------------------------------------------------------
" 日本語入力に関する設定:
"
if has('multi_byte_ime') || has('xim')
  " IME ON時のカーソルの色を設定(設定例:紫)
  highlight CursorIM guibg=Purple guifg=NONE
  " 挿入モード・検索モードでのデフォルトのIME状態設定
  set iminsert=0 imsearch=0
  if has('xim') && has('GUI_GTK')
    " XIMの入力開始キーを設定:
    " 下記の s-space はShift+Spaceの意味でkinput2+canna用設定
    "set imactivatekey=s-space
  endif
  " 挿入モードでのIME状態を記憶させない場合、次行のコメントを解除
  "inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
endif

"---------------------------------------------------------------------------
" マウスに関する設定:
"
" 解説:
" mousefocusは幾つか問題(一例:ウィンドウを分割しているラインにカーソルがあっ
" ている時の挙動)があるのでデフォルトでは設定しない。Windowsではmousehide
" が、マウスカーソルをVimのタイトルバーに置き日本語を入力するとチラチラする
" という問題を引き起す。
"
" どのモードでもマウスを使えるようにする
set mouse=a
" マウスの移動でフォーカスを自動的に切替えない (mousefocus:切替る)
set nomousefocus
" 入力時にマウスポインタを隠す (nomousehide:隠さない)
set nomousehide
" ビジュアル選択(D&D他)を自動的にクリップボードへ (:help guioptions_a)
set guioptions+=a
" 非GUIのタブページラインを使用する
set guioptions-=e
set guioptions+=k


"---------------------------------------------------------------------------
" 配色に関する設定:
"
" set number した際の行番号は、Hi LineNrで変えることができる
" 参考 : help highlight-groups

" mark.vim は、 colorshcemeを読み込んだ後にsourceおよび設定が必要となる
if filereadable($HOME . "/.vim/dein/.cache/_vimrc/.dein/plugin/mark.vim")
  source $HOME/.vim/dein/.cache/_vimrc/.dein/plugin/mark.vim
  function! DefaultHighlightings()
    highlight MarkWord1  ctermbg=Green    ctermfg=Black  guibg=#A4E57E    guifg=Black
    highlight MarkWord2  ctermbg=Yellow   ctermfg=Black  guibg=#FFDB72    guifg=Black
    highlight MarkWord3  ctermbg=Red      ctermfg=Black  guibg=#FF7272    guifg=Black
    highlight MarkWord4  ctermbg=Blue     ctermfg=Black  guibg=#6CABDA    guifg=Black
    highlight MarkWord5  ctermbg=Magenta  ctermfg=Black  guibg=#FFB3FF    guifg=Black
    highlight MarkWord6  ctermbg=Cyan     ctermfg=Black  guibg=#AACCEE    guifg=Black
    highlight MarkWord7  ctermbg=Green    ctermfg=Black  guibg=#3CB371    guifg=Black
    highlight MarkWord8  ctermbg=Yellow   ctermfg=Black  guibg=#F0E6AC    guifg=Black
    highlight MarkWord9  ctermbg=Red      ctermfg=Black  guibg=#FF4500    guifg=Black
    highlight MarkWord10 ctermbg=Blue     ctermfg=Black  guibg=#1E90FF    guifg=Black
    highlight MarkWord11 ctermbg=Magenta  ctermfg=Black  guibg=#EE82EE    guifg=Black
    highlight MarkWord12 ctermbg=Cyan     ctermfg=Black  guibg=#40E0D0    guifg=Black
  endfunction
  call DefaultHighlightings()
  autocmd ColorScheme * call DefaultHighlightings()
endif


au ColorScheme * hi NonText    guibg=NONE guifg=#40F0F0
au ColorScheme * hi SpecialKey guibg=#404040 guifg=#4080F0
au ColorScheme * hi DiffChange guifg=NONE
au ColorScheme * hi Search     guibg=#858394
au ColorScheme * hi DiffText   guibg=#784745

colorscheme molokai
"colorscheme default

set renderoptions=type:directx


function! g:Fontsize(mode, ...)
    if has('win32')
        let l:f = substitute(&guifont, ':h\(\d\+\):', '\=printf(":h%d:", submatch(1) + a:mode)', "")
        let &guifont = l:f
    else
        let l:f = substitute(&guifont, ' \(\d\+\)\>', '\=printf(" %d", submatch(1) + a:mode)', "")
        let &guifont = l:f
    endif
endfunction
nmap + :call Fontsize(+1)<cr>
nmap - :call Fontsize(-1)<cr>

tmap <2-LeftMouse> <C-W>:
tmap <MiddleMouse> <C-W>"+


" タイトルバーを有効にする
set title

" 現在のディレクトリをタイトルに表示
let &titlestring=fnamemodify(getcwd(), ':t')

" カレントディレクトリ変更時にタイトルを更新
autocmd DirChanged * let &titlestring = fnamemodify(getcwd(), ':t')
